// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api/transaction.proto (package transaction_temporal_workflow.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message transaction_temporal_workflow.api.CreateTransactionRequest
 */
export class CreateTransactionRequest extends Message<CreateTransactionRequest> {
  /**
   * @generated from field: string transaction_id = 1;
   */
  transactionId = "";

  /**
   * @generated from field: int64 amount = 2;
   */
  amount = protoInt64.zero;

  /**
   * @generated from field: string product_code = 3;
   */
  productCode = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: string idempotency_key = 5;
   */
  idempotencyKey = "";

  constructor(data?: PartialMessage<CreateTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "transaction_temporal_workflow.api.CreateTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "product_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "idempotency_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTransactionRequest | PlainMessage<CreateTransactionRequest> | undefined, b: CreateTransactionRequest | PlainMessage<CreateTransactionRequest> | undefined): boolean {
    return proto3.util.equals(CreateTransactionRequest, a, b);
  }
}

/**
 * @generated from message transaction_temporal_workflow.api.CreateTransactionResponse
 */
export class CreateTransactionResponse extends Message<CreateTransactionResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<CreateTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "transaction_temporal_workflow.api.CreateTransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTransactionResponse {
    return new CreateTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTransactionResponse {
    return new CreateTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTransactionResponse {
    return new CreateTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTransactionResponse | PlainMessage<CreateTransactionResponse> | undefined, b: CreateTransactionResponse | PlainMessage<CreateTransactionResponse> | undefined): boolean {
    return proto3.util.equals(CreateTransactionResponse, a, b);
  }
}

/**
 * @generated from message transaction_temporal_workflow.api.ProcessTransactionRequest
 */
export class ProcessTransactionRequest extends Message<ProcessTransactionRequest> {
  /**
   * @generated from field: string transaction_id = 1;
   */
  transactionId = "";

  /**
   * @generated from field: string idempotency_key = 2;
   */
  idempotencyKey = "";

  constructor(data?: PartialMessage<ProcessTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "transaction_temporal_workflow.api.ProcessTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "idempotency_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessTransactionRequest {
    return new ProcessTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessTransactionRequest {
    return new ProcessTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessTransactionRequest {
    return new ProcessTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessTransactionRequest | PlainMessage<ProcessTransactionRequest> | undefined, b: ProcessTransactionRequest | PlainMessage<ProcessTransactionRequest> | undefined): boolean {
    return proto3.util.equals(ProcessTransactionRequest, a, b);
  }
}

/**
 * @generated from message transaction_temporal_workflow.api.ProcessTransactionResponse
 */
export class ProcessTransactionResponse extends Message<ProcessTransactionResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<ProcessTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "transaction_temporal_workflow.api.ProcessTransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessTransactionResponse {
    return new ProcessTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessTransactionResponse {
    return new ProcessTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessTransactionResponse {
    return new ProcessTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessTransactionResponse | PlainMessage<ProcessTransactionResponse> | undefined, b: ProcessTransactionResponse | PlainMessage<ProcessTransactionResponse> | undefined): boolean {
    return proto3.util.equals(ProcessTransactionResponse, a, b);
  }
}

